//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace mtcmoscow { namespace SensorHub { namespace Pressure {

// Methods
// Readable Properties
public ref class PressureGetAltitudeRequestedEventArgs sealed
{
public:
    PressureGetAltitudeRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PressureGetAltitudeResult^ Result
    {
        PressureGetAltitudeResult^ get() { return m_result; }
        void set(_In_ PressureGetAltitudeResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PressureGetAltitudeResult^>^ GetResultAsync(PressureGetAltitudeRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PressureGetAltitudeResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PressureGetAltitudeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PressureGetAltitudeResult^ m_result;
};

public ref class PressureGetInchesOfMercuryRequestedEventArgs sealed
{
public:
    PressureGetInchesOfMercuryRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PressureGetInchesOfMercuryResult^ Result
    {
        PressureGetInchesOfMercuryResult^ get() { return m_result; }
        void set(_In_ PressureGetInchesOfMercuryResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PressureGetInchesOfMercuryResult^>^ GetResultAsync(PressureGetInchesOfMercuryRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PressureGetInchesOfMercuryResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PressureGetInchesOfMercuryResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PressureGetInchesOfMercuryResult^ m_result;
};

public ref class PressureGetMmOfMercuryRequestedEventArgs sealed
{
public:
    PressureGetMmOfMercuryRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PressureGetMmOfMercuryResult^ Result
    {
        PressureGetMmOfMercuryResult^ get() { return m_result; }
        void set(_In_ PressureGetMmOfMercuryResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PressureGetMmOfMercuryResult^>^ GetResultAsync(PressureGetMmOfMercuryRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PressureGetMmOfMercuryResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PressureGetMmOfMercuryResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PressureGetMmOfMercuryResult^ m_result;
};

public ref class PressureGetPascalRequestedEventArgs sealed
{
public:
    PressureGetPascalRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PressureGetPascalResult^ Result
    {
        PressureGetPascalResult^ get() { return m_result; }
        void set(_In_ PressureGetPascalResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PressureGetPascalResult^>^ GetResultAsync(PressureGetPascalRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PressureGetPascalResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PressureGetPascalResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PressureGetPascalResult^ m_result;
};

// Writable Properties
public ref class PressureSetAltitudeRequestedEventArgs sealed
{
public:
    PressureSetAltitudeRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ double value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property double Value
    {
        double get() { return m_value; }
    }

    property PressureSetAltitudeResult^ Result
    {
        PressureSetAltitudeResult^ get() { return m_result; }
        void set(_In_ PressureSetAltitudeResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<PressureSetAltitudeResult^>^ GetResultAsync(PressureSetAltitudeRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PressureSetAltitudeResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PressureSetAltitudeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    double m_value;
    PressureSetAltitudeResult^ m_result;
};

public ref class PressureSetInchesOfMercuryRequestedEventArgs sealed
{
public:
    PressureSetInchesOfMercuryRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ double value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property double Value
    {
        double get() { return m_value; }
    }

    property PressureSetInchesOfMercuryResult^ Result
    {
        PressureSetInchesOfMercuryResult^ get() { return m_result; }
        void set(_In_ PressureSetInchesOfMercuryResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<PressureSetInchesOfMercuryResult^>^ GetResultAsync(PressureSetInchesOfMercuryRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PressureSetInchesOfMercuryResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PressureSetInchesOfMercuryResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    double m_value;
    PressureSetInchesOfMercuryResult^ m_result;
};

public ref class PressureSetMmOfMercuryRequestedEventArgs sealed
{
public:
    PressureSetMmOfMercuryRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ double value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property double Value
    {
        double get() { return m_value; }
    }

    property PressureSetMmOfMercuryResult^ Result
    {
        PressureSetMmOfMercuryResult^ get() { return m_result; }
        void set(_In_ PressureSetMmOfMercuryResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<PressureSetMmOfMercuryResult^>^ GetResultAsync(PressureSetMmOfMercuryRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PressureSetMmOfMercuryResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PressureSetMmOfMercuryResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    double m_value;
    PressureSetMmOfMercuryResult^ m_result;
};

public ref class PressureSetPascalRequestedEventArgs sealed
{
public:
    PressureSetPascalRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ double value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property double Value
    {
        double get() { return m_value; }
    }

    property PressureSetPascalResult^ Result
    {
        PressureSetPascalResult^ get() { return m_result; }
        void set(_In_ PressureSetPascalResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<PressureSetPascalResult^>^ GetResultAsync(PressureSetPascalRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PressureSetPascalResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PressureSetPascalResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    double m_value;
    PressureSetPascalResult^ m_result;
};

} } } } 
